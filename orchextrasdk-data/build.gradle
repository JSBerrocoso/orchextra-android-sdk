/*
 * Created by Orchextra
 *
 * Copyright (C) 2016 Gigigo Mobile Services SL
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
apply from: rootProject.file('gradle/checkstyle.gradle')
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'realm-android'
apply plugin: 'sonar-runner'
apply plugin: 'jacoco'



android {
  compileSdkVersion parent.ext.androidCompileSdkVersion
  buildToolsVersion parent.ext.androidBuildToolsVersion

  defaultConfig {
    minSdkVersion parent.ext.androidMinSdkVersion
    targetSdkVersion parent.ext.androidTargetSdkVersion
    versionCode parent.ext.androidVersionCode
    versionName parent.ext.androidVersionName
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt')
    }
  }

  lintOptions {
    abortOnError false
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }

}

dependencies {

  compile (parent.ext.dependencies.dagger){
    transitive = false
    exclude group:'com.google.dagger', module:'dagger'
    exclude group:'javax.inject'
  }

  compile project(':orchextrasdk-dataprovision')
  compile parent.ext.dependencies.gggLib

  testCompile parent.ext.testDependencies.junit
  testCompile parent.ext.testDependencies.mockito
}

tasks.withType(Test) {
  testLogging {
    events "started", "passed", "skipped", "failed"
  }
}


// build a jar with source files
task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier = 'sources'
}

artifacts {
  archives sourcesJar
}