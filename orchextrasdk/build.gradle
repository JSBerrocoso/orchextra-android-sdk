/*
 * Created by Orchextra
 *
 * Copyright (C) 2016 Gigigo Mobile Services SL
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
apply from: rootProject.file('gradle/checkstyle.gradle')
apply plugin: 'com.github.dcendents.android-maven'

def STRING = "String"
def BOOLEAN = "boolean"
def INT = "int"
def LONG = "long"

def DISABLED_RAGGING = '0'
def MIN_RAGGING_TIME = '10000'
def MAX_RAGGING_TIME = '180000'
def BACKGROUND_BEACONS_SCAN_TIME = '1100'
def BACKGROUND_BEACONS_BEETWEEN_SCAN_TIME = '5000'

android {

  compileSdkVersion parent.ext.androidCompileSdkVersion
  buildToolsVersion parent.ext.androidBuildToolsVersion

  defaultConfig {
    minSdkVersion parent.ext.androidMinSdkVersion
    targetSdkVersion parent.ext.androidTargetSdkVersion
    versionCode parent.ext.androidVersionCode
    versionName parent.ext.androidVersionName

    buildConfigField INT, "BACKGROUND_BEACONS_RANGING_TIME", MIN_RAGGING_TIME
    buildConfigField LONG, "BACKGROUND_BEACONS_SCAN_TIME", BACKGROUND_BEACONS_SCAN_TIME
    buildConfigField LONG, "BACKGROUND_BEACONS_BEETWEEN_SCAN_TIME",
        BACKGROUND_BEACONS_BEETWEEN_SCAN_TIME
    buildConfigField STRING, "API_VERSION", '"v1/"'
    buildConfigField INT, "CONCURRENT_INTERACTORS", '3'
    buildConfigField STRING, "X_APP_SDK", '"ANDROID"'
    buildConfigField STRING, "TOKEN_TYPE_BEARER", '"Bearer"'
    buildConfigField STRING, "IBEACON_LAYOUT_PARSING",
        '"m:2-3=0215,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25"'

    buildConfigField STRING, "API_URL", '"https://sdk.orchextra.io/"'
  }

  buildTypes {
    staging {
      signingConfig android.signingConfigs.debug
      buildConfigField STRING, "API_URL", '"https://sdk.s.orchextra.io/"'
      //  buildConfigField STRING, "API_URL", '"https://sdk-demo-1.s.orchextra.io/"'
      debuggable true
    }
    debug {
      buildConfigField STRING, "API_URL", '"https://sdk.q.orchextra.io/"'
      debuggable true
    }
    release {
      buildConfigField STRING, "API_URL", '"https://sdk.orchextra.io/"'
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
    }
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
    incremental false //this is for do Clean pre any Build, do it 4 prevent Dagger no-true-errors
  }

  lintOptions {
    abortOnError false
  }

  // Required due to a conflict due to easy and jmock required for doclava
  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/INDEX.LIST'
  }
  flavorDimensions "play"

  productFlavors {

    play9 { dimension "play" }
    play10 { dimension "play" }
    play11 { dimension "play" }
    play8 { dimension "play" }
    play7 { dimension "play" }
    playno { dimension "play" }
  }
  sourceSets {
    play7 {
      java.srcDirs = ['src/play/java', 'src/play/java/']
    }
    play8 {
      java.srcDirs = ['src/play/java', 'src/play/java/']
    }
    play9 {
      java.srcDirs = ['src/play/java', 'src/play/java/']
    }
    play10 {
      java.srcDirs = ['src/play/java', 'src/play/java/']
    }
    play11 {
      java.srcDirs = ['src/play/java', 'src/play/java/']
    }
    playno {
      java.srcDirs = ['src/playno/java', 'src/playno/java/']
    }
  }
  // true to publish all flavour artifacts
  //publishNonDefault true
  // default build flavour
  defaultPublishConfig "play10Release"
}

configurations {
  play7StagingImplementation
  play8StagingImplementation
  play9StagingImplementation
  play10StagingImplementation
  play11StagingImplementation
  playnoStagingImplementation

  play7DebugImplementation
  play8DebugImplementation
  play9DebugImplementation
  play10DebugImplementation
  play11DebugImplementation
  playnoDebugImplementation

  play7ReleaseImplementation
  play8ReleaseImplementation
  play9ReleaseImplementation
  play10ReleaseImplementation
  play11ReleaseImplementation
  playnoReleaseImplementation
}

if( android.productFlavors.size() > 0 ) {
  android.libraryVariants.all { variant ->
    // Publish a main artifact, otherwise the maven pom is not generated
    //if( variant.name == android.defaultPublishConfig ) {
    def bundleTask = tasks["bundle${name.capitalize()}"]
    artifacts {
      println('BUNDLE!'+bundleTask.archivePath)
      println('classifier!'+variant.name)
      println('builtBy!'+bundleTask.name)
      archives(bundleTask.archivePath) {
        classifier variant.name
        builtBy bundleTask

      }
    }
  }
  //}
}
dependencies {
  api(parent.ext.dependencies.dagger) {
    transitive = false
    exclude group: 'com.google.dagger', module: 'dagger'
    exclude group: 'javax.inject'
  }
  annotationProcessor(parent.ext.dependencies.daggerCompiler) {
    transitive = false
    exclude group: 'com.google.dagger', module: 'dagger'
    exclude group: 'javax.inject'
  }
  api parent.ext.dependencies.loggingInterceptor
  api parent.ext.dependencies.altBeacon
  api(parent.ext.dependencies.barcodescanner) {
    exclude module: 'support-v4'
    // com.android.support:support-annotations:23.1.1
  }
  api parent.ext.dependencies.imageRecognitionInterface
  api project(':orchextrasdk-control')
  api project(':orchextrasdk-data')
  /*GooglePlayServices*/
  play11Api('com.google.android.gms:play-services-location:11.0.2')
  play11Api('com.google.android.gms:play-services-gcm:11.0.2')
  play10Api('com.google.android.gms:play-services-location:10.0.1')
  play10Api('com.google.android.gms:play-services-gcm:10.0.1')
  play9Api('com.google.android.gms:play-services-location:9.0.0')
  play9Api('com.google.android.gms:play-services-gcm:9.0.0')
  play8Api('com.google.android.gms:play-services-location:8.4.0')
  play8Api('com.google.android.gms:play-services-gcm:8.4.0')
  play7Api('com.google.android.gms:play-services-location:7.8.0')
  play7Api('com.google.android.gms:play-services-gcm:7.8.0')
  play11Api('com.google.android.gms:play-services-location:11.0.2')
  play11Api('com.google.android.gms:play-services-gcm:11.0.2')
  play10Api('com.google.android.gms:play-services-location:10.0.1')
  play10Api('com.google.android.gms:play-services-gcm:10.0.1')
  play9Api('com.google.android.gms:play-services-location:9.0.0')
  play9Api('com.google.android.gms:play-services-gcm:9.0.0')
  play8Api('com.google.android.gms:play-services-location:8.4.0')
  play8Api('com.google.android.gms:play-services-gcm:8.4.0')
  play7Api('com.google.android.gms:play-services-location:7.8.0')
  play7Api('com.google.android.gms:play-services-gcm:7.8.0')
  play11Api('com.google.android.gms:play-services-location:11.0.2')
  play11Api('com.google.android.gms:play-services-gcm:11.0.2')
  play10Api('com.google.android.gms:play-services-location:10.0.1')
  play10Api('com.google.android.gms:play-services-gcm:10.0.1')
  play9Api('com.google.android.gms:play-services-location:9.0.0')
  play9Api('com.google.android.gms:play-services-gcm:9.0.0')
  play8Api('com.google.android.gms:play-services-location:8.4.0')
  play8Api('com.google.android.gms:play-services-gcm:8.4.0')
  play7Api('com.google.android.gms:play-services-location:7.8.0')
  play7Api('com.google.android.gms:play-services-gcm:7.8.0')
  testImplementation parent.ext.testDependencies.junit
  testImplementation parent.ext.testDependencies.mockito
  androidTestImplementation parent.ext.testDependencies.testRunner
  androidTestImplementation parent.ext.testDependencies.testRules
  androidTestImplementation parent.ext.testDependencies.dexMaker
  androidTestImplementation(parent.ext.testDependencies.dexMakerMockito) {
    exclude group: 'org.hamcrest', module: 'hamcrest-core'
  }
}

// build a jar with source files
task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier = 'sources'
}

artifacts {
  archives sourcesJar
}
