/*
 * Created by Orchextra
 *
 * Copyright (C) 2016 Gigigo Mobile Services SL
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt'
apply from: rootProject.file('gradle/checkstyle.gradle')
apply plugin: 'com.github.dcendents.android-maven'

def CONCURRENT_INTERACTORS = "CONCURRENT_INTERACTORS"

def BACKGROUND_BEACONS_RANGING_TIME = "BACKGROUND_BEACONS_RANGING_TIME";
def BACKGROUND_BEACONS_SCAN_TIME = "BACKGROUND_BEACONS_SCAN_TIME";
def BACKGROUND_BEACONS_BEETWEEN_SCAN_TIME = "BACKGROUND_BEACONS_BEETWEEN_SCAN_TIME";
def IBEACON_LAYOUT_PARSING = "IBEACON_LAYOUT_PARSING";

def API_URL = "API_URL";
def API_VERSION = "API_VERSION";
def X_APP_SDK = "X_APP_SDK";
def TOKEN_TYPE_BEARER = "TOKEN_TYPE_BEARER";

android {
  compileSdkVersion rootProject.ext.androidCompileSdkVersion
  buildToolsVersion rootProject.ext.androidBuildToolsVersion

  defaultConfig {
    minSdkVersion rootProject.ext.androidMinSdkVersion
    targetSdkVersion rootProject.ext.androidTargetSdkVersion
    versionCode rootProject.ext.androidVersionCode
    versionName rootProject.ext.androidVersionName
  }

  buildTypes {
    staging {
      signingConfig android.signingConfigs.debug
      debuggable true
    }
    debug {
      debuggable true
    }
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
    }
  }

  project.android.libraryVariants.all { variant ->

    variant.productFlavors.each { flavor ->

      def flavorData = rootProject.ext

      setVariantBuildConfigField(variant, flavorData.beacons.minRaggingTime,
          BACKGROUND_BEACONS_RANGING_TIME, INT)
      setVariantBuildConfigField(variant, flavorData.beacons.backgroundScanTime,
          BACKGROUND_BEACONS_SCAN_TIME, LONG)
      setVariantBuildConfigField(variant, flavorData.beacons.backgroundBetweenScanTime,
          BACKGROUND_BEACONS_BEETWEEN_SCAN_TIME, LONG)
      setVariantBuildConfigField(variant, flavorData.beacons.layoutParsing, IBEACON_LAYOUT_PARSING,
          STRING)

      setVariantBuildConfigField(variant, flavorData.apiUrl, API_URL, STRING)

      setVariantBuildConfigField(variant, flavorData.apiVersion, API_VERSION, STRING)
      setVariantBuildConfigField(variant, flavorData.concurrentInteractors, CONCURRENT_INTERACTORS,
          INT)
      setVariantBuildConfigField(variant, flavorData.headers.xAppSdk, X_APP_SDK, STRING)
      setVariantBuildConfigField(variant, flavorData.session.bearerToken, TOKEN_TYPE_BEARER, STRING)
    }
  }


  testOptions {
    unitTests.returnDefaultValues = true
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
    incremental false //this is for do Clean pre any Build, do it 4 prevent Dagger no-true-errors
  }

  lintOptions {
    abortOnError false
  }

  // Required due to a conflict due to easy and jmock required for doclava
  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/INDEX.LIST'
  }
  flavorDimensions "play"

  productFlavors {

    play9 { dimension "play" }
    play8 { dimension "play" }
    play7 { dimension "play" }
    playno { dimension "play" }
  }

  sourceSets {
    play7 {
      java.srcDirs = ['src/play/java', 'src/play/java/']
    }
    play8 {
      java.srcDirs = ['src/play/java', 'src/play/java/']
    }
    play9 {
      java.srcDirs = ['src/play/java', 'src/play/java/']
    }
    playno {
      java.srcDirs = ['src/playno/java', 'src/playno/java/']
    }
  }
  // true to publish all flavour artifacts
  publishNonDefault true
  // default build flavour
  defaultPublishConfig "play7Debug"
}

configurations {
  play7StagingCompile
  play8StagingCompile
  play9StagingCompile
  playnoStagingCompile

  play7DebugCompile
  play8DebugCompile
  play9DebugCompile
  playnoDebugCompile

  play7ReleaseCompile
  play8ReleaseCompile
  play9ReleaseCompile
  playnoReleaseCompile
}


dependencies {
  sourceCompatibility = 1.7
  targetCompatibility = 1.7

  compile rootProject.ext.dependencies.androidSupportV7

  compile(rootProject.ext.dependencies.dagger) {
    transitive = false
    exclude group: 'com.google.dagger', module: 'dagger'
    exclude group: 'javax.inject'
  }

  apt(parent.ext.dependencies.daggerCompiler) {
    transitive = false
    exclude group: 'com.google.dagger', module: 'dagger'
    exclude group: 'javax.inject'
  }

  //compile parent.ext.dependencies.loggingInterceptor
  compile parent.ext.dependencies.altBeacon
  compile(parent.ext.dependencies.barcodescanner)
          { exclude module: 'support-v4'
            // com.android.support:support-annotations:23.1.1
          }

  compile rootProject.ext.dependencies.gggLibPermissions
  compile rootProject.ext.dependencies.imageRecognitionInterface

  compile rootProject.ext.modules.orchextraSdkControl
  compile rootProject.ext.modules.orchextraSdkData

  /*GooglePlayServices*/
  play9StagingCompile('com.google.android.gms:play-services-location:9.0.0')
  play9StagingCompile('com.google.android.gms:play-services-gcm:9.0.0')

  play8StagingCompile('com.google.android.gms:play-services-location:8.4.0')
  play8StagingCompile('com.google.android.gms:play-services-gcm:8.4.0')

  play7StagingCompile('com.google.android.gms:play-services-location:7.8.0')
  play7StagingCompile('com.google.android.gms:play-services-gcm:7.8.0')

  play9DebugCompile('com.google.android.gms:play-services-location:9.0.0')
  play9DebugCompile('com.google.android.gms:play-services-gcm:9.0.0')

  play8DebugCompile('com.google.android.gms:play-services-location:8.4.0')
  play8DebugCompile('com.google.android.gms:play-services-gcm:8.4.0')

  play7DebugCompile('com.google.android.gms:play-services-location:7.8.0')
  play7DebugCompile('com.google.android.gms:play-services-gcm:7.8.0')

  play9ReleaseCompile('com.google.android.gms:play-services-location:9.0.0')
  play9ReleaseCompile('com.google.android.gms:play-services-gcm:9.0.0')

  play8ReleaseCompile('com.google.android.gms:play-services-location:8.4.0')
  play8ReleaseCompile('com.google.android.gms:play-services-gcm:8.4.0')

  play7ReleaseCompile('com.google.android.gms:play-services-location:7.8.0')
  play7ReleaseCompile('com.google.android.gms:play-services-gcm:7.8.0')

  testCompile rootProject.ext.testDependencies.junit
  testCompile rootProject.ext.testDependencies.mockito

  androidTestCompile rootProject.ext.testDependencies.testRunner
  androidTestCompile rootProject.ext.testDependencies.testRules

  androidTestCompile rootProject.ext.testDependencies.dexMaker
  androidTestCompile(rootProject.ext.testDependencies.dexMakerMockito) {
    exclude group: 'org.hamcrest', module: 'hamcrest-core'
  }
}

// build a jar with source files
task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier = 'sources'
}

artifacts {
  archives sourcesJar
}
