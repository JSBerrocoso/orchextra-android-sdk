/*
 * Created by Orchextra
 *
 * Copyright (C) 2016 Gigigo Mobile Services SL
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.6.2'
    classpath 'com.applivery.gradle:applivery-deploy:1.0.0'
  }
}

apply plugin: 'com.android.application'
apply from: rootProject.file('gradle/checkstyle.gradle')
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'applivery-plugin'

android {
  compileSdkVersion 25
  buildToolsVersion '26'

  defaultConfig {
    applicationId "com.gigigo.orchextrasdk.demo"
    minSdkVersion 16
    targetSdkVersion parent.ext.androidTargetSdkVersion
    versionCode parent.ext.androidVersionCode
    versionName "1.0.0"

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    vectorDrawables.useSupportLibrary = true
  }

  lintOptions {
    abortOnError false
  }

  buildTypes {
    debug {
      testCoverageEnabled = false
      debuggable true
    }

    release {
      debuggable true
      signingConfig signingConfigs.debug
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt')
    }
  }

  lintOptions {
    quiet true
    abortOnError false
    ignoreWarnings true
  }

  testOptions.unitTests.all {
    testLogging {
      events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
      outputs.upToDateWhen { false }
      showStandardStreams = true
    }
  }
}

dexcount {
  format = "list"
  includeClasses = false
  includeFieldCount = true
  includeTotalMethodCount = true
  orderByMethodCount = false
  verbose = true
  maxTreeDepth = Integer.MAX_VALUE
  enableForInstantRun = false
  runOnEachAssemble = false
}

dependencies {

  compile project(':core')
  compile project(':scanner')
  compile project(':geofence')
  compile project(':indoorpositioning')

  compile 'com.android.support:appcompat-v7:25.3.1'
  compile 'com.android.support:design:25.3.1'
  compile 'com.android.support:support-vector-drawable:25.3.1'
  compile 'com.android.support:support-v4:25.3.1'
  compile 'com.android.support:cardview-v7:25.3.1'
  compile 'com.android.support:recyclerview-v7:25.3.1'
  compile 'com.google.android.gms:play-services-maps:11.0.4'
  compile 'com.facebook.stetho:stetho:1.5.0'
  compile 'uk.co.chrisjenx:calligraphy:2.3.0'
  debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.1'
  releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'

  testCompile 'junit:junit:4.12'

  androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2', {
    exclude group: 'com.android.support', module: 'support-annotations'
  }
  androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2.2', {
    exclude group: 'com.android.support', module: 'support-annotations'
  }
}

applivery {
  appId = "59a69f14b143c2640ffb5418"
  apiKey = "$System.env.APPLIVERY_API_KEY"
}

android.applicationVariants.all { variant ->
  def applicationId = variant.applicationId
  def adb = android.getAdbExe().toString()
  def variantName = variant.name.capitalize()
  def grantPermissionTask = tasks.create("grant${variantName}Permissions") << {
    "${adb} devices".execute().text.eachLine {
      if (it.endsWith("device")) {
        def device = it.split()[0]
        println "Granting permissions on devices ${device}"
        "${adb} -s ${device} shell pm grant ${applicationId} android.permission.CAMERA".execute()
        "${adb} -s ${device} shell pm grant ${applicationId} android.permission.ACCESS_FINE_LOCATION".
            execute()
      }
    }
  }
}