/*
 * Created by Orchextra
 *
 * Copyright (C) 2016 Gigigo Mobile Services SL
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.6.2'
    classpath 'com.applivery.gradle:applivery-deploy:1.0.0'
  }
}

apply plugin: 'com.android.application'
apply from: rootProject.file('gradle/checkstyle.gradle')
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'applivery-plugin'

android {
  compileSdkVersion rootProject.ext.androidCompileSdkVersion
  buildToolsVersion rootProject.ext.androidBuildToolsVersion

  defaultConfig {
    applicationId "com.gigigo.orchextrasdk.demo"
    minSdkVersion rootProject.ext.androidMinSdkVersion
    targetSdkVersion rootProject.ext.androidTargetSdkVersion
    versionCode generateAutoVersionCode()
    versionName "3.0.0-rc." + generateAutoVersionCode()

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    vectorDrawables.useSupportLibrary = true
  }

  lintOptions {
    abortOnError false
  }

  buildTypes {
    debug {
      testCoverageEnabled = false
      debuggable true
    }

    release {
      debuggable true
      signingConfig signingConfigs.debug
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt')
    }
  }

  lintOptions {
    quiet true
    abortOnError false
    ignoreWarnings true
  }

  testOptions.unitTests.all {
    testLogging {
      events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
      outputs.upToDateWhen { false }
      showStandardStreams = true
    }
  }
}

dexcount {
  format = "list"
  includeClasses = false
  includeFieldCount = true
  includeTotalMethodCount = true
  orderByMethodCount = false
  verbose = true
  maxTreeDepth = Integer.MAX_VALUE
  enableForInstantRun = false
  runOnEachAssemble = false
}

dependencies {
  compile rootProject.ext.modules.core
  compile rootProject.ext.modules.geofence
  compile rootProject.ext.modules.indoorPositioning
  compile rootProject.ext.modules.imageRecognizer
  compile rootProject.ext.modules.scanner

  compile rootProject.ext.libraries.supportAppCompatV7
  compile rootProject.ext.libraries.supportDesign
  compile rootProject.ext.libraries.suppportVectorDrawable
  compile rootProject.ext.libraries.supportV4
  compile rootProject.ext.libraries.supportCardViewV7
  compile rootProject.ext.libraries.supportRecyclerViewV7
  compile rootProject.ext.libraries.playServicesMaps
  compile rootProject.ext.libraries.stetho
  compile rootProject.ext.libraries.calligraphy

  testCompile rootProject.ext.testLibraries.junit
  debugCompile rootProject.ext.libraries.leakcanary
  releaseCompile rootProject.ext.libraries.leakcanaryNoop
  androidTestCompile rootProject.ext.testLibraries.espressoCore, {
    exclude group: 'com.android.support', module: 'support-annotations'
  }
  androidTestCompile rootProject.ext.testLibraries.espressoIntents, {
    exclude group: 'com.android.support', module: 'support-annotations'
  }
}

applivery {
  appId = "59a69f3ae2272dd77951a75b"
  buildPath = "./app/build/outputs/apk/app-release.apk"
  apiKey = "$System.env.APPLIVERY_API_KEY"
}

android.applicationVariants.all { variant ->
  def applicationId = variant.applicationId
  def adb = android.getAdbExe().toString()
  def variantName = variant.name.capitalize()

  def grantPermissionTask = tasks.create("grant${variantName}Permissions") << {
    "${adb} devices".execute().text.eachLine {
      if (it.endsWith("device")) {
        def device = it.split()[0]
        println "Granting permissions on devices ${device}"
        "${adb} -s ${device} shell pm grant ${applicationId} android.permission.CAMERA".execute()
        "${adb} -s ${device} shell pm grant ${applicationId} android.permission.ACCESS_FINE_LOCATION".
            execute()
      }
    }
  }
}