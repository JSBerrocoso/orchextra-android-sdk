/*
 * Created by Orchextra
 *
 * Copyright (C) 2016 Gigigo Mobile Services SL
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply from: rootProject.file('gradle/checkstyle.gradle')

android {
  compileSdkVersion rootProject.ext.androidCompileSdkVersion
  buildToolsVersion rootProject.ext.androidBuildToolsVersion

  defaultConfig {
    applicationId "com.gigigo.orchextrasdk.demoapp"
    minSdkVersion 11
    //parent.ext.androidMinSdkVersion (you can change that, but you need API >=10 for fabmenu)
    targetSdkVersion rootProject.ext.androidTargetSdkVersion

    //for VuforiaCredentials,VuforiaCredentials Only work with armv7 lib.so, in this case we exclude all
    //less than armv7, but not with exclude, wit Ndk { abifilters
    ndk {
      abiFilters "armeabi-v7a"
    }
  }

  lintOptions {
    abortOnError false
  }

  buildTypes {
    staging {
      signingConfig signingConfigs.debug
      testCoverageEnabled = true
      debuggable true
    }
    debug {
      testCoverageEnabled = true
      debuggable true
    }
    release {
      debuggable true
      signingConfig signingConfigs.debug
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt')
    }
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }
  /*
    dexOptions {
      // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
      preDexLibraries = preDexEnabled && !travisBuild && !jenkinsBuild
    }
  */
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7 //java7
    targetCompatibility JavaVersion.VERSION_1_7 //java7
  }

  productFlavors {
    play7 {}
    play8 {}
    play9 {}
    playno {}
  }

  productFlavors.whenObjectAdded { flavor ->
    //def version = rootProject.ext[versionMajor].version
    def version = [major: rootProject.ext.versionMajor,
                   minor: rootProject.ext.versionMinor,
                   patch: rootProject.ext.versionPatch]

    flavor.versionCode generateVersionCode(version.major, version.minor, version.patch)
    flavor.versionName generateVersionName(version.major, version.minor, version.patch)
  }
}

configurations {
  play7StagingCompile
  play8StagingCompile
  play9StagingCompile
  playnoStagingCompile

  play7DebugCompile
  play8DebugCompile
  play9DebugCompile
  playnoDebugCompile

  play7ReleaseCompile
  play8ReleaseCompile
  play9ReleaseCompile
  playnoReleaseCompile
}

dependencies {
  compile rootProject.ext.dependencies.androidSupportV7
  compile 'com.github.Gigigo-Android-Devs:fabmenu:proto'

  //tiene refencia a otra ggglib 104/ahora la de nubo apunta a la 5.2 y sin support
  compile rootProject.ext.dependencies.imageRecognitionVuforia //vuforia new nuborisar version

  //flavour dependencies from project, for test(necesary for generate builtsvariants aars)
  play7StagingCompile project(path: ':orchextrasdk', configuration: 'play7Staging')
  play8StagingCompile project(path: ':orchextrasdk', configuration: 'play8Staging')
  play9StagingCompile project(path: ':orchextrasdk', configuration: 'play9Staging')
  //test noplay, without play services, not work geofecing, segmentacion spatial, schedulable actions
  playnoStagingCompile project(path: ':orchextrasdk', configuration: 'playnoStaging')

  play7DebugCompile project(path: ':orchextrasdk', configuration: 'play7Debug')
  play8DebugCompile project(path: ':orchextrasdk', configuration: 'play8Debug')
  play9DebugCompile project(path: ':orchextrasdk', configuration: 'play9Debug')
  //test noplay, without play services, not work geofecing, segmentacion spatial, schedulable actions
  playnoDebugCompile project(path: ':orchextrasdk', configuration: 'playnoDebug')

  play7ReleaseCompile project(path: ':orchextrasdk', configuration: 'play7Release')
  play8ReleaseCompile project(path: ':orchextrasdk', configuration: 'play8Release')
  play9ReleaseCompile project(path: ':orchextrasdk', configuration: 'play9Release')
  //test noplay, without play services, not work geofecing, segmentacion spatial, schedulable actions
  playnoReleaseCompile project(path: ':orchextrasdk', configuration: 'playnoRelease')

  testCompile rootProject.ext.testDependencies.junit
}
